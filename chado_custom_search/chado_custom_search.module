<?php

/**
 * @file
 * Hook Implementations for this module.
 */

// Include the API.
require_once 'chado_custom_search.api.inc';
require_once 'includes/chado_search_api.download.inc';

require_once 'ChadoCustomSearch.inc';
require_once 'includes/TestSearch.inc';

/**
 * Implement hook_menu().
 */
function chado_custom_search_menu() {
  $items = [];

  // Retrieve all defined chado custom searches.
  $searches = get_all_chado_custom_searches();

  // For each defined search, create a menu item.
  foreach ($searches as $class_name => $info) {
    $path = $class_name::$menu['path'];
    $items[ $path ] = [
      'title' => $class_name::$title,
      'description' => t($class_name::$description),
      'page callback' => 'drupal_get_form',
      'page arguments' => ['chado_custom_search_form', $class_name],
      'access arguments' => $class_name::$permissions,
      'type' => MENU_CALLBACK,
    ];

    // DOWNLOADS:
    // -- Comma-separated.
    $items[$path . '/csv'] = [
      'title' => $class_name::$title . ': CSV',
      'page callback' => 'trpdownload_download_page',
      'page arguments' => ['chado_custom_search_csv'],
      'access arguments' => ['chado_search_api download'],
      'type' => MENU_CALLBACK,
    ];

    // -- Tab-delimited.
    $items[$path . '/tsv'] = [
      'title' => $class_name::$title . ': TSV',
      'page callback' => 'trpdownload_download_page',
      'page arguments' => ['chado_custom_search_tsv'],
      'access arguments' => ['chado_search_api download'],
      'type' => MENU_CALLBACK,
    ];
  }

  return $items;
}

/**
 * Implements hook_permission().
 */
function chado_custom_search_permission() {
  return array(
    'chado_search_api download' => array(
      'title' => t('Permission to download search results.'),
    )
  );
}

/**
 * Provides the search page for any chado custom search.
 *
 * NOTE: This form is dynamic based on the information
 * provided in the search class.
 *
 * @param array $form
 *   Drupal's default form array.
 * @param array $form_state
 *   The current state of the form.
 * @return array
 *   The fully defined form including filter options and results.
 */
function chado_custom_search_form($form, &$form_state) {
  $q = drupal_get_query_parameters();

  // Instantiate the search class.
  $class = $form_state['build_info']['args'][0];
  $search = new $class;

  // Save the class name for use in the submit.
  $form['class_name'] = [
    '#type' => 'hidden',
    '#value' => $class,
  ];

  // Add CSS/JS as defined in the class. We do this here so that it can
  // be added to and/or altered in the form method.
  $form['#attached']['css'] = [];
  foreach ($search::$attached['css'] as $subpath) {
    $path = drupal_get_path('module', $search::$module) . '/' . $subpath;
    $form['#attached']['css'][] = $path;
  }
  $form['#attached']['js'] = [];
  foreach ($search::$attached['js'] as $subpath) {
    $path = drupal_get_path('module', $search::$module) . '/' . $subpath;
    $form['#attached']['js'][] = $path;
  }

  // Get the form based on the search class.
  $form = $search->form($form, $form_state);

  // If we have values then we need to query!
  $doQuery = FALSE;
  $values = NULL;
  if (isset($form_state['values']) && !empty($form_state['values'])) {
    $doQuery = TRUE;
    $values = $form_state['values'];
  }
  elseif ($search::$require_submit == FALSE) {
    $doQuery = TRUE;

    // Ensure that initial query takes into account URL parameters if present.
    $values = [];
    foreach ($class::$info['filters'] as $name => $details) {
      if (isset($q[$name])) {
        $values[$name] = $q[$name];
      }
    }
  }
  elseif(!empty($q)) {
    $doQuery = TRUE;

    // Ensure that initial query takes into account URL parameters if present.
    $values = [];
    foreach ($class::$info['filters'] as $name => $details) {
      if (isset($q[$name])) {
        $values[$name] = $q[$name];
      }
    }
  }

  if ($doQuery) {

    $search->setValues($values, TRUE);

    $offset = (isset($q['offset'])) ? $q['offset'] : 0;
    if (!is_numeric($offset)) { $offset = 0; }
    $results = $search->getResults($offset);

    if ($results !== FALSE) {
      $q['class'] = $class;
      $search->formatDownloadLinks($form, $q);
      $search->formatResults($form, $results);
    }
  }

  return $form;
}

/**
 * Validate for chado_custom_search_form().
 */
function chado_custom_search_form_validate(&$form, &$form_state) {

  $class = $form_state['values']['class_name'];
  $search = new $class;
  $search->validateForm($form, $form_state);

}

/**
 * Submit for chado_custom_search_form().
 */
function chado_custom_search_form_submit(&$form, &$form_state) {

  // If we have values then we want to add them to the URL
  // for bookmarking of searches.
  if (isset($form_state['values']) && !empty($form_state['values'])) {

    // We want to add the value of each filter to the path.
    $params = [];
    $class = $form_state['values']['class_name'];
    foreach ($class::$info['filters'] as $name => $details) {
      $params[$name] = trim($form_state['values'][$name]);
    }

    $form_state['redirect'] = [
      $class::$menu['path'],
      ['query' => $params],
    ];
  }
}
